*devcontainer.txt* Description

INTRODUCTION                                     *devcontainer*

Description

CONTENTS                                         *devcontainer-contents*

  1.  Overview                                   |devcontainer-overview|
  2.  Requirements                               |devcontainer-requirements|
  3.  Installation                               |devcontainer-installation|
  4.  Usage                                      |devcontainer-usage|
  5.  Commands                                   |devcontainer-commands|
  6.  Functions                                  |devcontainer-functions|
  7.  Mappings                                   |devcontainer-mappings|
  8.  Plugs                                      |devcontainer-plugs|
  9.  Options                                    |devcontainer-options|
  10. Issues                                     |devcontainer-issues|
  11. Contributing                               |devcontainer-contributing|
  12. Version                                    |devcontainer-version|
  13. License                                    |devcontainer-license|

OVERVIEW                                         *devcontainer-overview*

REQUIREMENTS                                     *devcontainer-requirements*

INSTALLATION                                     *devcontainer-installation*

1. Packer.nvim <https://github.com/wbthomason/packer.nvim>

Add the following to your packer setup: >

  use { 'esensar/nvim-dev-container' }
<

2. Plug <https://github.com/junegunn/vim-plug>

Add the following to your vimrc, or something sourced therein: >

  Plug 'esensar/nvim-dev-container'
<
Then install via `:PlugInstall`

3. Manual

Clone this repository and copy the files in plugin/, lua/, and doc/
to their respective directories in your vimfiles, or copy the text from
the github repository into new files in those directories. Make sure to
run `:helptags`.

USAGE                                            *devcontainer-usage*

To use the plugin with defaults just call the `setup` function: >

  require("devcontainer").setup{}
<

It is possible to override some of the functionality of the plugin with options passed into `setup`. Everything passed to `setup` is optional. Following block represents default values: >

require("devcontainer").setup {
  config_search_start = function()
    -- By default this function uses vim.loop.cwd()
    -- This is used to find a starting point for .devcontainer.json file search
    -- Since by default, it is searched for recursively
    -- That behavior can also be disabled
  end,
  workspace_folder_provider = function()
    -- By default this function uses first workspace folder for integrated lsp if available and vim.loop.cwd() as a fallback
    -- This is used to replace `${localWorkspaceFolder}` in devcontainer.json
    -- Also used for creating default .devcontainer.json file
  end,
  terminal_handler = function(command)
    -- By default this function creates a terminal in a new tab using :terminal command
    -- It also removes statusline when that tab is active, to prevent double statusline
    -- It can be overridden to provide custom terminal handling
  end,
  nvim_dockerfile_template = function(base_image)
    -- Takes base_image and returns string, which should be used as a Dockerfile
    -- This is used when adding neovim to existing images
    -- Check out default implementation in lua/devcontainer/config.lua
    -- It installs neovim version based on current version
  end,
  devcontainer_json_template = function()
    -- Returns table - list of lines to set when creating new devcontainer.json files
    -- As a template
    -- Used only when using functions from commands module or created commands
  end,
  -- Can be set to false to prevent generating default commands
  -- Default commands are listed below
  generate_commands = true,
  -- By default no autocommands are generated
  -- This option can be used to configure automatic starting and cleaning of containers
  autocommands = {
    -- can be set to true to automatically start containers when devcontainer.json is available
    init = false,
    -- can be set to true to automatically remove any started containers and any built images when exiting vim
    clean = false,
    -- can be set to true to automatically restart containers when devcontainer.json file is updated
    update = false,
  },
  -- can be changed to increase or decrease logging from library
  log_level = "info",
  -- can be set to true to disable recursive search
  -- in that case only .devcontainer.json and .devcontainer/devcontainer.json files will be checked relative
  -- to the directory provided by config_search_start
  disable_recursive_config_search = false,
  -- By default all mounts are added (config, data and state)
  -- This can be changed to disable mounts or change their options
  -- This can be useful to mount local configuration
  -- And any other mounts when attaching to containers with this plugin
  attach_mounts = {
    neovim_config = {
      -- enables mounting local config to /root/.config/nvim in container
      enabled = true,
      -- makes mount readonly in container
      options = { "readonly" }
    },
    neovim_data = {
      -- enables mounting local data to /root/.local/share/nvim in container
      enabled = true,
      -- no options by default
      options = {}
    },
    -- Only useful if using neovim 0.8.0+
    neovim_state = {
      -- enables mounting local state to /root/.local/state/nvim in container
      enabled = true,
      -- no options by default
      options = {}
    },
    -- This takes a list of mounts (strings) that should always be added whenever attaching to containers
    -- This is passed directly as --mount option to docker command
    -- Or multiple --mount options if there are multiple vaues
    custom_mounts = {}
  },
  -- This takes a list of mounts (strings) that should always be added to every run container
  -- This is passed directly as --mount option to docker command
  -- Or multiple --mount options if there are multiple vaues
  always_mount = {}
}
<

Check out [wiki](https://github.com/esensar/nvim-dev-container/wiki) for tips.

COMMANDS                                         *devcontainer-commands*

If not disabled by using {generate_commands = false} in setup, this plugin provides the following commands:

*:DevcontainerBuild* - builds image from nearest devcontainer.json
*:DevcontainerImageRun* - runs image from nearest devcontainer.json
*:DevcontainerBuildAndRun* - builds image from nearest devcontainer.json and then runs it
*:DevcontainerBuildRunAndAttach* - builds image from nearest devcontainer.json (with neovim added), runs it and attaches to neovim in it - currently using `terminal_handler`, but in the future with Neovim 0.8.0 maybe directly (https://github.com/esensar/nvim-dev-container/issues/30)
*:DevcontainerComposeUp* - run docker-compose up based on devcontainer.json
*:DevcontainerComposeDown* - run docker-compose down based on devcontainer.json
*:DevcontainerComposeRm* - run docker-compose rm based on devcontainer.json
*:DevcontainerStartAuto* - start whatever is defined in devcontainer.json
*:DevcontainerStopAuto* - stop whatever was started based on devcontainer.json
*:DevcontainerStopAll* - stop everything started with this plugin (in current session)
*:DevcontainerRemoveAll* - remove everything started with this plugin (in current session)
*:DevcontainerLogs* - open plugin log file
*:DevcontainerOpenNearestConfig* - opens nearest devcontainer.json file if it exists
*:DevcontainerEditNearestConfig* - opens nearest devcontainer.json file if it exists, or creates a new one if it does not

FUNCTIONS                                        *devcontainer-functions*

This plugin provides multiple modules related to devcontainer functionality,
but not all of them are needed for use tasks. Many of the functionalities are
exposed to enable custom functionality.

================================================================================
Devcontainer plugin config module                          *devcontainer.status*

Provides access to current status and is used internally to update it
Don't change directly!
Can be used for read-only access

DevcontainerImageStatus                                *DevcontainerImageStatus*


    Fields: ~
        {image_id}           (string)      id of the image
        {source_dockerfile}  (string)      path to the file used to build the image
        {neovim_added}       (boolean)     true if add_neovim flag was used to add neovim to the image
        {tmp_dockerfile}     (string|nil)  path to temporary dockerfile if add neovim was used


DevcontainerContainerStatus                        *DevcontainerContainerStatus*


    Fields: ~
        {container_id}  (string)   id of the container
        {image_id}      (string)   id of the used image
        {autoremove}    (boolean)  true if this container was started with autoremove flag


DevcontainerComposeStatus                            *DevcontainerComposeStatus*


    Fields: ~
        {file}  (string)  path to compose file


DevcontainerBuildStatus                                *DevcontainerBuildStatus*


    Fields: ~
        {progress}           (number)      0-100 percentage
        {step_count}         (number)      number of steps to build
        {current_step}       (number)      current step
        {image_id}           (string|nil)  id of the built image
        {source_dockerfile}  (string)      path to the file used to build the image
        {build_command}      (string)      command used to build the image
        {commands_run}       (string)      list of commands run by build (layers)
        {running}            (boolean)     true if still running


DevcontainerStatus                                          *DevcontainerStatus*


    Fields: ~
        {images_built}        (List[DevcontainerImageStatus])      
        {running_containers}  (List[DevcontainerContainerStatus])  
        {stopped_containers}  (List[DevcontainerContainerStatus])  
        {build_status}        (List[DevcontainerBuildStatus])      
        {compose_services}    (List[DevcontainerComposeStatus])    


M.get_status()                                  *devcontainer.status.get_status*
    Returns current devcontainer status in a table

    Returns: ~
        {DevcontainerStatus}  


M.find_container({opts})                    *devcontainer.status.find_container*
    Finds container with requested opts
    Read-only

    Parameters: ~
        {opts}  (DevcontainerContainerStatus)  required opts

    Returns: ~
        {DevcontainerContainerStatus}  


M.find_image({opts})                            *devcontainer.status.find_image*
    Finds image with requested opts
    Read-only

    Parameters: ~
        {opts}  (DevcontainerImageStatus)  required opts

    Returns: ~
        {DevcontainerImageStatus}  


================================================================================
Main devcontainer module - used to setup the plugin               *devcontainer*

Provides setup function

DevcontainerAutocommandOpts                        *DevcontainerAutocommandOpts*


    Fields: ~
        {init}    (boolean|nil)  set to true to enable automatic devcontainer start
        {clean}   (boolean|nil)  set to true to enable automatic devcontainer stop and clean
        {update}  (boolean|nil)  set to true to enable automatic devcontainer update when config file is changed


DevcontainerSetupOpts                                    *DevcontainerSetupOpts*


    Fields: ~
        {config_search_start}              (function|nil)                     provides starting point for .devcontainer.json seach
        {workspace_folder_provider}        (function|nil)                     provides current workspace folder
        {terminal_handler}                 (function|nil)                     handles terminal command requests, useful for floating terminals and similar
        {nvim_dockerfile_template}         (function|nil)                     provides dockerfile template based on passed base_image - returns string
        {devcontainer_json_template}       (function|nil)                     provides template for new .devcontainer.json files - returns table
        {generate_commands}                (boolean|nil)                      can be set to false to prevent plugin from creating commands (true by default)
        {autocommands}                     (DevcontainerAutocommandOpts|nil)  can be set to enable autocommands, disabled by default
        {log_level}                        (log_level|nil)                    can be used to override library logging level
        {disable_recursive_config_search}  (boolean|nil)                      can be used to disable recursive .devcontainer search
        {attach_mounts}                    (AttachMountsOpts|nil)             can be used to configure mounts when adding neovim to containers
        {always_mount}                     (List[string]|nil)                 list of mounts to add to every container


M.setup({opts})                                             *devcontainer.setup*
    Starts the plugin and sets it up with provided options

    Parameters: ~
        {opts}  (DevcontainerSetupOpts|nil)  


================================================================================
Docker module                                              *devcontainer.docker*

Provides functions related to docker control:
 - building
 - attaching
 - running

DockerPullOpts                                                  *DockerPullOpts*


    Fields: ~
        {on_success}  (function())  success callback
        {on_fail}     (function())  failure callback


M.pull({image}, {opts})                               *devcontainer.docker.pull*
    Pull passed image using docker pull

    Parameters: ~
        {image}  (string)          Docker image to pull
        {opts}   (DockerPullOpts)  Additional options including callbacks

    Usage: ~
        >
            require("devcontainer.docker").pull("alpine", { on_success = function() end, on_fail = function() end})
        <


DockerBuildOpts                                                *DockerBuildOpts*


    Fields: ~
        {tag}          (string|nil)                         tag for the image built
        {add_neovim}   (boolean|nil)                        install neovim in the image (useful only for attaching to image)
        {args}         (table|nil)                          list of additional arguments to build command
        {on_success}   (function(image_id))                 success callback taking the image_id of the built image
        {on_progress}  (function(DevcontainerBuildStatus))  callback taking build status object
        {on_fail}      (function())                         failure callback


M.build({file}, {path}, {opts})                      *devcontainer.docker.build*
    Build image from passed dockerfile using docker build

    Parameters: ~
        {file}  (string)           Path to Dockerfile to build
        {path}  (string|nil)       Path to the workspace, vim.lsp.buf.list_workspace_folders()[1] by default
        {opts}  (DockerBuildOpts)  Additional options including callbacks and tag

    Usage: ~
        >
            docker.build("Dockerfile", { on_success = function(image_id) end, on_fail = function() end })
        <


DockerRunOpts                                                    *DockerRunOpts*


    Fields: ~
        {autoremove}        (boolean)                 automatically remove container after stopping - true by default
        {tty}               (boolean)                 attach to container TTY and display it in terminal buffer, using configured terminal handler
        {command}           (string|table|nil)        command to run in container
        {args}              (table|nil)               list of additional arguments to run command
        {terminal_handler}  (function(command))       override to open terminal in a different way, :tabnew + termopen by default
        {on_success}        (function(container_id))  success callback taking the id of the started container - not invoked if tty
        {on_fail}           (function())              failure callback


M.run({image}, {opts})                                 *devcontainer.docker.run*
    Run passed image using docker run
    NOTE: If terminal_handler is passed, then it needs to start the process too - default termopen does just that

    Parameters: ~
        {image}  (string)         Docker image to run
        {opts}   (DockerRunOpts)  Additional options including callbacks

    Usage: ~
        >
            docker.run("alpine", { on_success = function(id) end, on_fail = function() end })
        <


DockerContainerStopOpts                                *DockerContainerStopOpts*


    Fields: ~
        {on_success}  (function())  success callback
        {on_fail}     (function())  failure callback


M.container_stop({containers}, {opts})      *devcontainer.docker.container_stop*
    Stop passed containers

    Parameters: ~
        {containers}  (List[string])             ids of containers to stop
        {opts}        (DockerContainerStopOpts)  Additional options including callbacks

    Usage: ~
        >
            docker.container_stop({ "some_id" }, { on_success = function() end, on_fail = function() end })
        <


DockerImageRmOpts                                            *DockerImageRmOpts*


    Fields: ~
        {force}       (boolean|nil)  force deletion
        {on_success}  (function())   success callback
        {on_fail}     (function())   failure callback


M.image_rm({images}, {opts})                      *devcontainer.docker.image_rm*
    Removes passed images

    Parameters: ~
        {images}  (List[string])       ids of images to remove
        {opts}    (DockerImageRmOpts)  Additional options including callbacks

    Usage: ~
        >
            docker.image_rm({ "some_id" }, { on_success = function() end, on_fail = function() end })
        <


DockerContainerRmOpts                                    *DockerContainerRmOpts*


    Fields: ~
        {force}       (boolean|nil)  force deletion
        {on_success}  (function())   success callback
        {on_fail}     (function())   failure callback


M.container_rm({containers}, {opts})          *devcontainer.docker.container_rm*
    Removes passed containers

    Parameters: ~
        {containers}  (List[string])           ids of containers to remove
        {opts}        (DockerContainerRmOpts)  Additional options including callbacks

    Usage: ~
        >
            docker.container_rm({ "some_id" }, { on_success = function() end, on_fail = function() end })
        <


================================================================================
Docker-compose module                              *devcontainer.docker-compose*

Provides functions related to docker-compose control

DockerComposeUpOpts                                        *DockerComposeUpOpts*


    Fields: ~
        {args}        (table|nil)   list of additional arguments to up command
        {on_success}  (function())  success callback
        {on_fail}     (function())  failure callback


M.up({compose_file}, {opts})                    *devcontainer.docker-compose.up*
    Run docker-compose up with passed file

    Parameters: ~
        {compose_file}  (string|table)         path to docker-compose.yml file or files
        {opts}          (DockerComposeUpOpts)  Additional options including callbacks

    Usage: ~
        >
            require("devcontainer.docker-compose").up("docker-compose.yml")
        <


DockerComposeDownOpts                                    *DockerComposeDownOpts*


    Fields: ~
        {on_success}  (function())  success callback
        {on_fail}     (function())  failure callback


M.down({compose_file}, {opts})                *devcontainer.docker-compose.down*
    Run docker-compose down with passed file

    Parameters: ~
        {compose_file}  (string|table)           path to docker-compose.yml file or files
        {opts}          (DockerComposeDownOpts)  Additional options including callbacks

    Usage: ~
        >
            require("devcontainer.docker-compose").down("docker-compose.yml")
        <


DockerComposeRmOpts                                        *DockerComposeRmOpts*


    Fields: ~
        {on_success}  (function())  success callback
        {on_fail}     (function())  failure callback


M.rm({compose_file}, {opts})                    *devcontainer.docker-compose.rm*
    Run docker-compose rm with passed file

    Parameters: ~
        {compose_file}  (string|table)         path to docker-compose.yml file or files
        {opts}          (DockerComposeRmOpts)  Additional options including callbacks

    Usage: ~
        >
            require("devcontainer.docker-compose").rm("docker-compose.yml")
        <


================================================================================
Devcontainer plugin config module                          *devcontainer.config*

Provides current devcontainer plugin configuration
Don't change directly, use `devcontainer.setup{}` instead
Can be used for read-only access

M.terminal_handler                        *devcontainer.config.terminal_handler*
    Handles terminal requests (mainly used for attaching to container)
    By default it uses terminal command

    Type: ~
        (function)  


                                  *devcontainer.config.nvim_dockerfile_template*
M.nvim_dockerfile_template
    Handles terminal requests (mainly used for attaching to container)
    By default it uses a template which installs neovim from source

    Type: ~
        (function)  


                                 *devcontainer.config.workspace_folder_provider*
M.workspace_folder_provider
    Provides docker build path
    By default uses first LSP workplace folder or vim.loop.cwd()

    Type: ~
        (function)  


M.config_search_start                  *devcontainer.config.config_search_start*
    Provides starting search path for .devcontainer.json
    After this search moves up until root
    By default it uses vim.loop.cwd()

    Type: ~
        (function)  


                           *devcontainer.config.disable_recursive_config_search*
M.disable_recursive_config_search
    Flag to disable recursive search for .devcontainer config files
    By default plugin will move up to root looking for .devcontainer files
    This flag can be used to prevent it and only look in M.config_search_start

    Type: ~
        (boolean)  


                                *devcontainer.config.devcontainer_json_template*
M.devcontainer_json_template
    Provides template for creating new .devcontainer.json files
    This function should return a table listing lines of the file

    Type: ~
        (function)  


MountOpts                                                            *MountOpts*


    Fields: ~
        {enabled}  (boolean)           if true this mount is enabled
        {options}  (List[string]|nil)  additional bind options, useful to define { "readonly" }


AttachMountsOpts                                              *AttachMountsOpts*


    Fields: ~
        {neovim_config}  (MountOpts|nil)  if true attaches neovim local config to /root/.config/nvim in container
        {neovim_data}    (MountOpts|nil)  if true attaches neovim data to /root/.local/share/nvim in container
        {neovim_state}   (MountOpts|nil)  if true attaches neovim state to /root/.local/state/nvim in container
        {custom_mounts}  (List[string])   list of custom mounts to add when attaching


M.attach_mounts                              *devcontainer.config.attach_mounts*
    Configuration for mounts when using attach command
    Useful to mount neovim configuration into container
    Applicable only to `devcontainer.commands` functions!

    Type: ~
        (AttachMountsOpts)  


M.always_mount                                *devcontainer.config.always_mount*
    List of mounts to always add to all containers
    Applicable only to `devcontainer.commands` functions!

    Type: ~
        (List)  [string]


log_level                                                            *log_level*
    '"trace"'

    Type: ~
        ---|


M.log_level                                      *devcontainer.config.log_level*
    | '"debug"'
    | '"info"'
    | '"warn"'
    | '"error"'
    | '"fatal"'
    Current log level

    Type: ~
        (log_level)  


================================================================================
High level devcontainer commands                         *devcontainer.commands*

Provides functions representing high level devcontainer commands

M.compose_up({callback})                      *devcontainer.commands.compose_up*
    Run docker-compose up from nearest devcontainer.json file

    Parameters: ~
        {callback}  (function|nil)  called on success - parsed devcontainer config is passed to the callback

    Usage: ~
        >
            require("devcontainer.commands").compose_up()
        <


M.compose_down({callback})                  *devcontainer.commands.compose_down*
    Run docker-compose down from nearest devcontainer.json file

    Parameters: ~
        {callback}  (function|nil)  called on success - parsed devcontainer config is passed to the callback

    Usage: ~
        >
            require("devcontainer.commands").compose_down()
        <


M.compose_rm({callback})                      *devcontainer.commands.compose_rm*
    Run docker-compose rm from nearest devcontainer.json file

    Parameters: ~
        {callback}  (function|nil)  called on success - parsed devcontainer config is passed to the callback

    Usage: ~
        >
            require("devcontainer.commands").compose_rm()
        <


M.docker_build({callback})                  *devcontainer.commands.docker_build*
    Run docker build from nearest devcontainer.json file

    Parameters: ~
        {callback}  (function|nil)  called on success - parsed devcontainer config and image id are passed to the callback

    Usage: ~
        >
            require("devcontainer.commands").docker_build()
        <


M.docker_image_run({callback})          *devcontainer.commands.docker_image_run*
    Run docker run from nearest devcontainer.json file

    Parameters: ~
        {callback}  (function|nil)  called on success - devcontainer config and container id are passed to the callback

    Usage: ~
        >
            require("devcontainer.commands").docker_image_run()
        <


                                    *devcontainer.commands.docker_build_and_run*
M.docker_build_and_run({callback})
    Run docker run from nearest devcontainer.json file, building before that

    Parameters: ~
        {callback}  (function|nil)  called on success - devcontainer config and container id are passed to the callback

    Usage: ~
        >
            require("devcontainer.commands").docker_build_and_run()
        <


                             *devcontainer.commands.docker_build_run_and_attach*
M.docker_build_run_and_attach({callback})
    Run docker run from nearest devcontainer.json file, building before that
    And then attach to the container with neovim added

    Parameters: ~
        {callback}  (function|nil)  called on success - devcontainer config and container id are passed to the callback

    Usage: ~
        >
            require("devcontainer.commands").docker_build_run_and_attach()
        <


M.start_auto({callback})                      *devcontainer.commands.start_auto*
    Parses devcontainer.json and starts whatever is defined there
    Looks for dockerComposeFile first
    Then it looks for dockerfile
    And last it looks for image

    Parameters: ~
        {callback}  (function|nil)  called on success - devcontainer config is passed to the callback

    Usage: ~
        >
            require("devcontainer.commands").start_auto()
        <


M.stop_auto({callback})                        *devcontainer.commands.stop_auto*
    Parses devcontainer.json and stops whatever is defined there
    Looks for dockerComposeFile first
    Then it looks for dockerfile
    And last it looks for image

    Parameters: ~
        {callback}  (function|nil)  called on success - devcontainer config is passed to the callback

    Usage: ~
        >
            require("devcontainer.commands").stop_auto()
        <


M.stop_all({callback})                          *devcontainer.commands.stop_all*
    Stops everything started with devcontainer plugin

    Parameters: ~
        {callback}  (function|nil)  called on success

    Usage: ~
        >
            require("devcontainer.commands").stop_all()
        <


M.remove_all({callback})                      *devcontainer.commands.remove_all*
    Removes everything started with devcontainer plugin

    Parameters: ~
        {callback}  (function|nil)  called on success

    Usage: ~
        >
            require("devcontainer.commands").remove_all()
        <


M.open_logs()                                  *devcontainer.commands.open_logs*
    Opens log file in a new buffer

    Usage: ~
        >
            require("devcontainer.commands").open_logs()
        <


                        *devcontainer.commands.open_nearest_devcontainer_config*
M.open_nearest_devcontainer_config()
    Opens nearest devcontainer config in a new buffer

    Usage: ~
        >
            require("devcontainer.commands").open_nearest_devcontainer_config()
        <


                                *devcontainer.commands.edit_devcontainer_config*
M.edit_devcontainer_config()
    Opens nearest devcontainer config in a new buffer or creates a new one in .devcontainer/devcontainer.json

    Usage: ~
        >
            require("devcontainer.commands").edit_devcontainer_config()
        <


================================================================================
Jsonc parsing module                            *devcontainer.config_file.jsonc*

Vim supports Json parsing by default, but devcontainer config files are Jsonc.
This module supports Jsonc parsing by removing comments and then parsing as Json.
Treesitter is used for this and jsonc parser needs to be installed.

                                    *devcontainer.config_file.jsonc.parse_jsonc*
M.parse_jsonc({jsonc_content})
    Parse Json string into a Lua table
    Usually file should be read and content should be passed as a string into the function

    Parameters: ~
        {jsonc_content}  (string)  

    Returns: ~
        {table}  

    Usage: ~
        >
            require("devcontainer.config_file.jsonc").parse_jsonc([[{ "test": "value" }]])
        <


================================================================================
Devcontainer config file parsing module         *devcontainer.config_file.parse*

Provides support for parsing specific devcontainer.json files as well as
automatic discovery and parsing of nearest file
Ensures basic configuration required for the plugin to work is present in files

                      *devcontainer.config_file.parse.parse_devcontainer_config*
M.parse_devcontainer_config({config_file_path}, {callback})
    Parse specific devcontainer.json file into a Lua table
    Ensures that at least one of "image", "dockerFile" or "dockerComposeFile" keys is present

    Parameters: ~
        {config_file_path}  (string)                  
        {callback}          (function(err,data)|nil)  if nil run sync, otherwise run async and pass result to the callback

    Returns: ~
        {table|nil}  or nil if running async

    Usage: ~
        >
            require("devcontainer.config_file.parse").parse_devcontainer_config([[{ "image": "test" }]])
        <


              *devcontainer.config_file.parse.parse_nearest_devcontainer_config*
M.parse_nearest_devcontainer_config({callback})
    Parse nearest devcontainer.json file into a Lua table
    Prefers .devcontainer.json over .devcontainer/devcontainer.json
    Looks in config.config_search_start first and then moves up all the way until root
    Fails if no devcontainer.json files were found, or if the first one found is invalid

    Parameters: ~
        {callback}  (function(err,data)|nil)  if nil run sync, otherwise run async and pass result to the callback

    Returns: ~
        {table|nil}  or nil if running async

    Usage: ~
        >
            require("devcontainer.config_file.parse").parse_nearest_devcontainer_config()
        <


                                  *devcontainer.config_file.parse.fill_defaults*
M.fill_defaults({config_file})
    Fills passed devcontainer config with defaults based on spec
    Expects a proper config file, parsed with functions from this module
    NOTE: This mutates passed config!

    Parameters: ~
        {config_file}  (table)  parsed config

    Returns: ~
        {table}  with filled defaults and absolute paths


               *devcontainer.config_file.parse.find_nearest_devcontainer_config*
M.find_nearest_devcontainer_config({callback})
    Return path of the nearest devcontainer.json file
    Prefers .devcontainer.json over .devcontainer/devcontainer.json
    Looks in config.config_search_start first and then moves up all the way until root
    Fails if no devcontainer.json files were found, or if the first one found is invalid

    Parameters: ~
        {callback}  (function(err,data)|nil)  if nil run sync, otherwise run async and pass result to the callback

    Returns: ~
        {string|nil}  or nil if running async

    Usage: ~
        >
            require("devcontainer.config_file.parse").find_nearest_devcontainer_config()
        <



ISSUES                                           *devcontainer-issues*

If you experience issues using plugin, please report them at
<https://github.com/esensar/nvim-dev-container/issues>.

CONTRIBUTING                                     *devcontainer-contributing*

Feel free to look at already reported issues at
<https://github.com/esensar/nvim-dev-container/issues>.
If available, check out CONTRIBUTING.md in the repository.
Otherwise, feel free to create a new issue or pull request.

VERSION                                          *devcontainer-version*

Version 0.1.0

LICENSE                                          *devcontainer-license*

MIT License

Copyright (c) 2022 Ensar Sarajčić

Permission is hereby granted, free of charge, to any person obtaining a copy
of this software and associated documentation files (the "Software"), to deal
in the Software without restriction, including without limitation the rights
to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
copies of the Software, and to permit persons to whom the Software is
furnished to do so, subject to the following conditions:

The above copyright notice and this permission notice shall be included in all
copies or substantial portions of the Software.

THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
SOFTWARE.

vim:tw=78:ts=2:ft=help:norl:
