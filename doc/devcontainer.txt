*devcontainer.txt* Description

INTRODUCTION                                     *devcontainer*

Description

CONTENTS                                         *devcontainer-contents*

  1.  Overview                                   |devcontainer-overview|
  2.  Requirements                               |devcontainer-requirements|
  3.  Installation                               |devcontainer-installation|
  4.  Usage                                      |devcontainer-usage|
  5.  Commands                                   |devcontainer-commands|
  6.  Functions                                  |devcontainer-functions|
  7.  Mappings                                   |devcontainer-mappings|
  8.  Plugs                                      |devcontainer-plugs|
  9.  Options                                    |devcontainer-options|
  10. Issues                                     |devcontainer-issues|
  11. Contributing                               |devcontainer-contributing|
  12. Version                                    |devcontainer-version|
  13. License                                    |devcontainer-license|

OVERVIEW                                         *devcontainer-overview*

REQUIREMENTS                                     *devcontainer-requirements*

INSTALLATION                                     *devcontainer-installation*

1. Packer.nvim <https://github.com/wbthomason/packer.nvim>

Add the following to your packer setup: >

  use { 'esensar/nvim-dev-container' }
<

2. Plug <https://github.com/junegunn/vim-plug>

Add the following to your vimrc, or something sourced therein: >

  Plug 'esensar/nvim-dev-container'
<
Then install via `:PlugInstall`

3. Manual

Clone this repository and copy the files in plugin/, lua/, and doc/
to their respective directories in your vimfiles, or copy the text from
the github repository into new files in those directories. Make sure to
run `:helptags`.

USAGE                                            *devcontainer-usage*

COMMANDS                                         *devcontainer-commands*

FUNCTIONS                                        *devcontainer-functions*

This plugin provides multiple modules related to devcontainer functionality,
but not all of them are needed for use tasks. Many of the functionalities are
exposed to enable custom functionality.

================================================================================
Docker module (docker + docker-compose)                    *devcontainer.docker*

Provides functions related to docker control:
 - building
 - attaching
 - running
 - docker-compose commands

DockerPullOpts                                                  *DockerPullOpts*


    Fields: ~
        {on_success}  (function())  success callback
        {on_fail}     (function())  failure callback


M.pull({image}, {opts})                               *devcontainer.docker.pull*
    Pull passed image using docker pull

    Parameters: ~
        {image}  (string)          Docker image to pull
        {opts}   (DockerPullOpts)  Additional options including callbacks

    Usage: ~
        >
            require("devcontainer.docker").pull("alpine", { on_success = function() end, on_fail = function() end})
        <


DockerBuildOpts                                                *DockerBuildOpts*


    Fields: ~
        {tag}         (string|nil)          tag for the image built
        {on_success}  (function(image_id))  success callback taking the image_id of the built image
        {on_fail}     (function())          failure callback


M.build({file}, {path}, {opts})                      *devcontainer.docker.build*
    Build image from passed dockerfile using docker build

    Parameters: ~
        {file}  (string)           Path to Dockerfile to build
        {path}  (string|nil)       Path to the workspace, vim.lsp.buf.list_workspace_folders()[1] by default
        {opts}  (DockerBuildOpts)  Additional options including callbacks and tag

    Usage: ~
        >
            docker.build("Dockerfile", { on_success = function(image_id) end, on_fail = function() end })
        <


DockerRunOpts                                                    *DockerRunOpts*


    Fields: ~
        {autoremove}        (boolean)                 automatically remove container after stopping - true by default
        {tty}               (boolean)                 attach to container TTY and display it in terminal buffer, using configured terminal handler
        {command}           (string|nil)              command to run in container
        {terminal_handler}  (function(command))       override to open terminal in a different way, :tabnew + termopen by default
        {on_success}        (function(container_id))  success callback taking the id of the started container - not invoked if tty
        {on_fail}           (function())              failure callback

    See: ~
        |TODO: terminal handler config|


M.run({image}, {opts})                                 *devcontainer.docker.run*
    Run passed image using docker run
    NOTE: If terminal_handler is passed, then it needs to start the process too - default termopen does just that

    Parameters: ~
        {image}  (string)         Docker image to run
        {opts}   (DockerRunOpts)  Additional options including callbacks

    Usage: ~
        >
            docker.run("alpine", { on_success = function(id) end, on_fail = function() end })
        <


================================================================================
Jsonc parsing module                            *devcontainer.config_file.jsonc*

Vim supports Json parsing by default, but devcontainer config files are Jsonc.
This module supports Jsonc parsing by removing comments and then parsing as Json.
Treesitter is used for this and jsonc parser needs to be installed.

                                    *devcontainer.config_file.jsonc.parse_jsonc*
M.parse_jsonc({jsonc_content})
    Parse Json string into a Lua table
    Usually file should be read and content should be passed as a string into the function

    Parameters: ~
        {jsonc_content}  (string)  

    Returns: ~
        {table}  

    Usage: ~
        >
            require("devcontainer.config_file.jsonc").parse_jsonc([[{ "test": "value" }]])
        <


================================================================================
Devcontainer config file parsing module         *devcontainer.config_file.parse*

Provides support for parsing specific devcontainer.json files as well as
automatic discovery and parsing of nearest file
Ensures basic configuration required for the plugin to work is present in files

                      *devcontainer.config_file.parse.parse_devcontainer_config*
M.parse_devcontainer_config({config_file_path}, {callback})
    Parse specific devcontainer.json file into a Lua table
    Ensures that at least one of "image", "dockerFile" or "dockerComposeFile" keys is present

    Parameters: ~
        {config_file_path}  (string)                  
        {callback}          (function(err,data)|nil)  if nil run sync, otherwise run async and pass result to the callback

    Returns: ~
        {table|nil}  or nil if running async

    Usage: ~
        >
            require("devcontainer.config_file.parse").parse_devcontainer_config([[{ "image": "test" }]])
        <


              *devcontainer.config_file.parse.parse_nearest_devcontainer_config*
M.parse_nearest_devcontainer_config({callback})
    Parse nearest devcontainer.json file into a Lua table
    Prefers .devcontainer.json over .devcontainer/devcontainer.json
    Looks in CWD first and then moves up all the way until root
    Fails if no devcontainer.json files were found, or if the first one found is invalid

    Parameters: ~
        {callback}  (function(err,data)|nil)  if nil run sync, otherwise run async and pass result to the callback

    Returns: ~
        {table|nil}  or nil if running async

    Usage: ~
        >
            require("devcontainer.config_file.parse").parse_nearest_devcontainer_config()
        <



MAPPINGS                                         *devcontainer-mappings*

PLUGS                                            *devcontainer-plugs*

OPTIONS                                          *devcontainer-options*

ISSUES                                           *devcontainer-issues*

If you experience issues using plugin, please report them at
<https://github.com/esensar/nvim-dev-container/issues>.

CONTRIBUTING                                     *devcontainer-contributing*

Feel free to look at already reported issues at
<https://github.com/esensar/nvim-dev-container/issues>.
If available, check out CONTRIBUTING.md in the repository.
Otherwise, feel free to create a new issue or pull request.

VERSION                                          *devcontainer-version*

Version 0.1.0

LICENSE                                          *devcontainer-license*

MIT License

Copyright (c) 2022 Ensar Sarajčić

Permission is hereby granted, free of charge, to any person obtaining a copy
of this software and associated documentation files (the "Software"), to deal
in the Software without restriction, including without limitation the rights
to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
copies of the Software, and to permit persons to whom the Software is
furnished to do so, subject to the following conditions:

The above copyright notice and this permission notice shall be included in all
copies or substantial portions of the Software.

THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
SOFTWARE.

vim:tw=78:ts=2:ft=help:norl:
