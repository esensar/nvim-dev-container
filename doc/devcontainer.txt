*devcontainer.txt* Description

INTRODUCTION                                     *devcontainer*

Description

CONTENTS                                         *devcontainer-contents*

  1.  Overview                                   |devcontainer-overview|
  2.  Requirements                               |devcontainer-requirements|
  3.  Installation                               |devcontainer-installation|
  4.  Usage                                      |devcontainer-usage|
  5.  Commands                                   |devcontainer-commands|
  6.  Functions                                  |devcontainer-functions|
  7.  Mappings                                   |devcontainer-mappings|
  8.  Plugs                                      |devcontainer-plugs|
  9.  Options                                    |devcontainer-options|
  10. Issues                                     |devcontainer-issues|
  11. Contributing                               |devcontainer-contributing|
  12. Version                                    |devcontainer-version|
  13. License                                    |devcontainer-license|

OVERVIEW                                         *devcontainer-overview*

REQUIREMENTS                                     *devcontainer-requirements*

INSTALLATION                                     *devcontainer-installation*

1. Packer.nvim <https://github.com/wbthomason/packer.nvim>

Add the following to your packer setup: >

  use { 'esensar/nvim-dev-container' }
<

2. Plug <https://github.com/junegunn/vim-plug>

Add the following to your vimrc, or something sourced therein: >

  Plug 'esensar/nvim-dev-container'
<
Then install via `:PlugInstall`

3. Manual

Clone this repository and copy the files in plugin/, lua/, and doc/
to their respective directories in your vimfiles, or copy the text from
the github repository into new files in those directories. Make sure to
run `:helptags`.

USAGE                                            *devcontainer-usage*

COMMANDS                                         *devcontainer-commands*

FUNCTIONS                                        *devcontainer-functions*

This plugin provides multiple modules related to devcontainer functionality,
but not all of them are needed for use tasks. Many of the functionalities are
exposed to enable custom functionality.

================================================================================
Devcontainer plugin config module                          *devcontainer.status*

Provides access to current status and is used internally to update it
Don't change directly!
Can be used for read-only access

DevcontainerImageStatus                                *DevcontainerImageStatus*


    Fields: ~
        {image_id}           (string)      id of the image
        {source_dockerfile}  (string)      path to the file used to build the image
        {neovim_added}       (boolean)     true if add_neovim flag was used to add neovim to the image
        {tmp_dockerfile}     (string|nil)  path to temporary dockerfile if add neovim was used


DevcontainerContainerStatus                        *DevcontainerContainerStatus*


    Fields: ~
        {container_id}  (string)   id of the container
        {image_id}      (string)   id of the used image
        {autoremove}    (boolean)  true if this container was started with autoremove flag


DevcontainerComposeStatus                            *DevcontainerComposeStatus*


    Fields: ~
        {file}  (string)  path to compose file


DevcontainerBuildStatus                                *DevcontainerBuildStatus*


    Fields: ~
        {progress}           (number)      0-100 percentage
        {step_count}         (number)      number of steps to build
        {current_step}       (number)      current step
        {image_id}           (string|nil)  id of the built image
        {source_dockerfile}  (string)      path to the file used to build the image
        {build_command}      (string)      command used to build the image
        {commands_run}       (string)      list of commands run by build (layers)
        {running}            (boolean)     true if still running


DevcontainerStatus                                          *DevcontainerStatus*


    Fields: ~
        {images_built}        (List[DevcontainerImageStatus])      
        {running_containers}  (List[DevcontainerContainerStatus])  
        {stopped_containers}  (List[DevcontainerContainerStatus])  
        {build_status}        (List[DevcontainerBuildStatus])      
        {compose_services}    (List[DevcontainerComposeStatus])    


M.get_status()                                  *devcontainer.status.get_status*
    Returns current devcontainer status in a table

    Returns: ~
        {DevcontainerStatus}  


M.find_container({opts})                    *devcontainer.status.find_container*
    Finds container with requested opts

    Parameters: ~
        {opts}  (DevcontainerContainerStatus)  required opts

    Returns: ~
        {DevcontainerContainerStatus}  


M.find_image({opts})                            *devcontainer.status.find_image*
    Finds image with requested opts

    Parameters: ~
        {opts}  (DevcontainerImageStatus)  required opts

    Returns: ~
        {DevcontainerImageStatus}  


================================================================================
Main devcontainer module - used to setup the plugin               *devcontainer*

Provides setup function

DevcontainerSetupOpts                                    *DevcontainerSetupOpts*


    Fields: ~
        {config_search_start}        (function|nil)   provides starting point for .devcontainer.json seach
        {workspace_folder_provider}  (function|nil)   provides current workspace folder
        {terminal_handler}           (function|nil)   handles terminal command requests, useful for floating terminals and similar
        {nvim_dockerfile_template}   (function|nil)   provides dockerfile template based on passed base_image
        {generate_commands}          (boolean|nil)    can be set to false to prevent plugin from creating commands
        {log_level}                  (log_level|nil)  can be used to override library logging level


M.setup({opts})                                             *devcontainer.setup*
    Starts the plugin and sets it up with provided options

    Parameters: ~
        {opts}  (DevcontainerSetupOpts|nil)  


================================================================================
Devcontainer plugin config module                          *devcontainer.config*

Provides current devcontainer plugin configuration
Don't change directly, use `devcontainer.setup{}` instead
Can be used for read-only access

M.terminal_handler                        *devcontainer.config.terminal_handler*


    Type: ~
        (function)  


                                  *devcontainer.config.nvim_dockerfile_template*
M.nvim_dockerfile_template


    Type: ~
        (function)  


                                 *devcontainer.config.workspace_folder_provider*
M.workspace_folder_provider
    Provides docker build path
    By default uses first LSP workplace folder or vim.loop.cwd()

    Type: ~
        (function)  


M.config_search_start                  *devcontainer.config.config_search_start*
    Provides starting search path for .devcontainer.json
    After this search moves up until root
    By default it uses vim.loop.cwd()

    Type: ~
        (function)  


log_level                                                            *log_level*
    '"trace"'

    Type: ~
        ---|


M.log_level                                      *devcontainer.config.log_level*
    | '"debug"'
    | '"info"'
    | '"warn"'
    | '"error"'
    | '"fatal"'
    Current log level

    Type: ~
        (log_level)  



MAPPINGS                                         *devcontainer-mappings*

PLUGS                                            *devcontainer-plugs*

OPTIONS                                          *devcontainer-options*

ISSUES                                           *devcontainer-issues*

If you experience issues using plugin, please report them at
<https://github.com/esensar/nvim-dev-container/issues>.

CONTRIBUTING                                     *devcontainer-contributing*

Feel free to look at already reported issues at
<https://github.com/esensar/nvim-dev-container/issues>.
If available, check out CONTRIBUTING.md in the repository.
Otherwise, feel free to create a new issue or pull request.

VERSION                                          *devcontainer-version*

Version 0.1.0

LICENSE                                          *devcontainer-license*

MIT License

Copyright (c) 2022 Ensar Sarajčić

Permission is hereby granted, free of charge, to any person obtaining a copy
of this software and associated documentation files (the "Software"), to deal
in the Software without restriction, including without limitation the rights
to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
copies of the Software, and to permit persons to whom the Software is
furnished to do so, subject to the following conditions:

The above copyright notice and this permission notice shall be included in all
copies or substantial portions of the Software.

THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
SOFTWARE.

vim:tw=78:ts=2:ft=help:norl:
